/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"github.com/rs/zerolog/log"
	"net/http"
	database_location "template_backend/database/paths/location"
	database_user "template_backend/database/paths/user"
	openapi_common "template_backend/open-api/common"
)

// AdminAPIService is a service that implements the logic for the AdminAPIServicer
// This service should implement the business logic for every endpoint for the AdminAPI API.
// Include any external packages or services that will be required by this service.
type AdminAPIService struct {
}

// NewAdminAPIService creates a default api service
func NewAdminAPIService() AdminAPIServicer {
	return &AdminAPIService{}
}

// LocationsPost - Create a new location
func (s *AdminAPIService) LocationsPost(ctx context.Context, location Location, r *http.Request) (ImplResponse, error) {
	token, found := openapi_common.ReadTokenFromHeader(r)
	if !found {
		log.Error().Msg("Bearer format invalid")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	_, content, err := database_user.VerifyJWT(&token)
	if err != nil {
		log.Error().Msg("Couldn't verify token")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	user := database_user.FindUserById(ctx, &content.ID)
	if user == nil {
		log.Error().Str("id", content.ID).Msg("User not found")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	if user.Roles != database_user.AdminUser {
		log.Error().Str("id", content.ID).Msg("User is not an admin")
		return Response(403, Error{ErrorMessages: []Message{{Code: "100", Message: "Forbidden. Admin access required."}}}), nil
	}

	err = database_location.CreateLocation(
		ctx,
		location.Id,
		location.City,
		location.Street,
		location.PostalCode,
		location.BuildingName,
		float64(location.Coordinates.Latitude),
		float64(location.Coordinates.Longitude),
		location.Coordinates.Notes,
	)
	if err != nil {
		log.Error().Str("id", location.Id).Msg("Failed to create location")
		return Response(500, Error{ErrorMessages: []Message{{Code: "500", Message: "Failed to create location"}}}), nil
	}

	return Response(201, Success{}), nil
}

// ProductsGet - Retrieve all products
func (s *AdminAPIService) ProductsGet(ctx context.Context) (ImplResponse, error) {
	// TODO - update ProductsGet with the required logic for this service method.
	// Add api_admin_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []Product{}) or use other options such as http.Ok ...
	// return Response(200, []Product{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ProductsGet method not implemented")
}

// ProductsPost - Create a new product
func (s *AdminAPIService) ProductsPost(ctx context.Context, product Product) (ImplResponse, error) {
	// TODO - update ProductsPost with the required logic for this service method.
	// Add api_admin_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, Product{}) or use other options such as http.Ok ...
	// return Response(201, Product{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ProductsPost method not implemented")
}
