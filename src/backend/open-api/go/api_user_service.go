/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"
	database_location "template_backend/database/paths/location"
	database_user "template_backend/database/paths/user"
	openapi_common "template_backend/open-api/common"

	"github.com/rs/zerolog/log"
)

// UserAPIService is a service that implements the logic for the UserAPIServicer
// This service should implement the business logic for every endpoint for the UserAPI API.
// Include any external packages or services that will be required by this service.
type UserAPIService struct {
}

// NewUserAPIService creates a default api service
func NewUserAPIService() UserAPIServicer {
	return &UserAPIService{}
}

// ChangeEmailPost - Change user email
func (s *UserAPIService) ChangeEmailPost(ctx context.Context, changeEmail ChangeEmail, r *http.Request) (ImplResponse, error) {
	token, found := openapi_common.ReadTokenFromHeader(r)
	if !found {
		log.Error().Msg("Bearer format invalid")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	_, content, err := database_user.VerifyJWT(&token)
	if err != nil {
		log.Error().Msg("Couldn't verify token to refresh")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	_, err = database_user.ChangeUserEmail(ctx, &content.ID, &changeEmail.NewEmail)
	if err != nil {
		log.Error().Str("id", content.ID).Msg("Couldn't update email for user")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	return Response(200, Success{}), nil
}

// ChangePasswordPost - Change user password
func (s *UserAPIService) ChangePasswordPost(ctx context.Context, changePassword ChangePassword, r *http.Request) (ImplResponse, error) {
	token, found := openapi_common.ReadTokenFromHeader(r)
	if !found {
		log.Error().Msg("Bearer format invalid")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	_, content, err := database_user.VerifyJWT(&token)
	if err != nil {
		log.Error().Msg("Couldn't verify token to refresh")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	user := database_user.AuthenticateUserById(ctx, content.ID, changePassword.CurrentPassword)
	if user == nil {
		log.Error().Str("id", content.ID).Msg("Couldn't find user by id")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	_, err = database_user.ChangeUserPassword(ctx, &content.ID, &changePassword.NewPassword)
	if err != nil {
		log.Error().Str("id", content.ID).Msg("Couldn't update email for user")
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	return Response(200, Success{}), nil
}

// LocationLocationIdGet - Retrieve a single location
func (s *UserAPIService) LocationLocationIdGet(ctx context.Context, locationId string) (ImplResponse, error) {
	location := database_location.FindLocationById(ctx, locationId)
	if location == nil {
		log.Error().Str("id", locationId).Msg("Location not found")
		return Response(404, Error{ErrorMessages: []Message{{Code: "404", Message: "Location not found"}}}), nil
	}

	// reformat location to comply with the openapi schema
	formattedLocation := Location{
		Id:           location.ID,
		City:         location.City,
		Street:       location.Street,
		PostalCode:   location.PostalCode,
		BuildingName: location.BuildingName,
		Coordinates: LocationCoordinates{
			Longitude: float32(location.Longitude),
			Latitude:  float32(location.Latitude),
			Notes:     location.Notes,
		},
	}

	return Response(200, formattedLocation), nil
}

// LocationsGet - Retrieve all locations
func (s *UserAPIService) LocationsGet(ctx context.Context) (ImplResponse, error) {
	locations := database_location.GetAllLocations(ctx)
	if locations == nil {
		log.Error().Msg("Failed to retrieve locations")
		return Response(500, Error{ErrorMessages: []Message{{Code: "500", Message: "Internal server error"}}}), nil
	}

	// reformat locations to comply with the openapi schema
	formattedLocations := make([]Location, len(locations))
	for i, location := range locations {
		formattedLocations[i] = Location{
			Id:           location.ID,
			City:         location.City,
			Street:       location.Street,
			PostalCode:   location.PostalCode,
			BuildingName: location.BuildingName,
			Coordinates: LocationCoordinates{
				Longitude: float32(location.Longitude),
				Latitude:  float32(location.Latitude),
				Notes:     location.Notes,
			},
		}
	}

	return Response(200, formattedLocations), nil
}

// PasswordResetPost - Initiate password reset
func (s *UserAPIService) PasswordResetPost(ctx context.Context, passwordReset PasswordReset) (ImplResponse, error) {
	// TODO - update PasswordResetPost with the required logic for this service method.
	// Add api_user_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Success{}) or use other options such as http.Ok ...
	// return Response(200, Success{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("PasswordResetPost method not implemented")
}

// ProductsProductIdGet - Retrieve a single product
func (s *UserAPIService) ProductsProductIdGet(ctx context.Context, productId string) (ImplResponse, error) {
	// TODO - update ProductsProductIdGet with the required logic for this service method.
	// Add api_user_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, ProductsProductIdGet200Response{}) or use other options such as http.Ok ...
	// return Response(200, ProductsProductIdGet200Response{}), nil

	// TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	// return Response(404, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ProductsProductIdGet method not implemented")
}

// ProductsProductIdRentPost - Rent a product
func (s *UserAPIService) ProductsProductIdRentPost(ctx context.Context, productId string, rentProductFormular RentProductFormular) (ImplResponse, error) {
	// TODO - update ProductsProductIdRentPost with the required logic for this service method.
	// Add api_user_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, RentProductConfirmation{}) or use other options such as http.Ok ...
	// return Response(200, RentProductConfirmation{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	// return Response(404, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ProductsProductIdRentPost method not implemented")
}

// ProfileGet - Get user profile
func (s *UserAPIService) ProfileGet(ctx context.Context, r *http.Request) (ImplResponse, error) {
	user, err := openapi_common.IsUserAuthorized(ctx, r)
	if err != nil {
		log.Error().Msg(err.Error())
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized."}}}), nil
	}
	sanitized := database_user.SanitizeUserProfile(user)
	return Response(200, sanitized), nil
}

// RentalsRentContractIdPickupPost - Confirm product pickup
func (s *UserAPIService) RentalsRentContractIdPickupPost(ctx context.Context, rentContractId string, pickupConfirmation PickupConfirmation) (ImplResponse, error) {
	// TODO - update RentalsRentContractIdPickupPost with the required logic for this service method.
	// Add api_user_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Success{}) or use other options such as http.Ok ...
	// return Response(200, Success{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	// return Response(404, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("RentalsRentContractIdPickupPost method not implemented")
}

// RentalsRentContractIdReturnPost - Confirm product return
func (s *UserAPIService) RentalsRentContractIdReturnPost(ctx context.Context, rentContractId string, returnProduct ReturnProduct) (ImplResponse, error) {
	// TODO - update RentalsRentContractIdReturnPost with the required logic for this service method.
	// Add api_user_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Success{}) or use other options such as http.Ok ...
	// return Response(200, Success{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	// return Response(404, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("RentalsRentContractIdReturnPost method not implemented")
}
