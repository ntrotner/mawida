/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RentalAPIController binds http requests to an api service and writes the service results to the http response
type RentalAPIController struct {
	service      RentalAPIServicer
	errorHandler ErrorHandler
}

// RentalAPIOption for how the controller is set up.
type RentalAPIOption func(*RentalAPIController)

// WithRentalAPIErrorHandler inject ErrorHandler into controller
func WithRentalAPIErrorHandler(h ErrorHandler) RentalAPIOption {
	return func(c *RentalAPIController) {
		c.errorHandler = h
	}
}

// NewRentalAPIController creates a default api controller
func NewRentalAPIController(s RentalAPIServicer, opts ...RentalAPIOption) Router {
	controller := &RentalAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RentalAPIController
func (c *RentalAPIController) Routes() Routes {
	return Routes{
		"ProductsProductIdRentPost": Route{
			strings.ToUpper("Post"),
			"/products/{productId}/rent",
			c.ProductsProductIdRentPost,
		},
		"RentalsRentContractIdPickupPost": Route{
			strings.ToUpper("Post"),
			"/rentals/{rentContractId}/pickup",
			c.RentalsRentContractIdPickupPost,
		},
		"RentalsRentContractIdReturnPost": Route{
			strings.ToUpper("Post"),
			"/rentals/{rentContractId}/return",
			c.RentalsRentContractIdReturnPost,
		},
	}
}

// ProductsProductIdRentPost - Rent a product
func (c *RentalAPIController) ProductsProductIdRentPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	productIdParam := params["productId"]
	if productIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"productId"}, nil)
		return
	}
	rentProductFormularParam := RentProductFormular{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&rentProductFormularParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRentProductFormularRequired(rentProductFormularParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRentProductFormularConstraints(rentProductFormularParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProductsProductIdRentPost(r.Context(), productIdParam, rentProductFormularParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RentalsRentContractIdPickupPost - Confirm product pickup
func (c *RentalAPIController) RentalsRentContractIdPickupPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	rentContractIdParam := params["rentContractId"]
	if rentContractIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"rentContractId"}, nil)
		return
	}
	pickupConfirmationParam := PickupConfirmation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&pickupConfirmationParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPickupConfirmationRequired(pickupConfirmationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPickupConfirmationConstraints(pickupConfirmationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RentalsRentContractIdPickupPost(r.Context(), rentContractIdParam, pickupConfirmationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RentalsRentContractIdReturnPost - Confirm product return
func (c *RentalAPIController) RentalsRentContractIdReturnPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	rentContractIdParam := params["rentContractId"]
	if rentContractIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"rentContractId"}, nil)
		return
	}
	returnProductParam := ReturnProduct{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&returnProductParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReturnProductRequired(returnProductParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertReturnProductConstraints(returnProductParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RentalsRentContractIdReturnPost(r.Context(), rentContractIdParam, returnProductParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
