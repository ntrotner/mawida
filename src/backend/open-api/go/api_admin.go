/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// AdminAPIController binds http requests to an api service and writes the service results to the http response
type AdminAPIController struct {
	service      AdminAPIServicer
	errorHandler ErrorHandler
}

// AdminAPIOption for how the controller is set up.
type AdminAPIOption func(*AdminAPIController)

// WithAdminAPIErrorHandler inject ErrorHandler into controller
func WithAdminAPIErrorHandler(h ErrorHandler) AdminAPIOption {
	return func(c *AdminAPIController) {
		c.errorHandler = h
	}
}

// NewAdminAPIController creates a default api controller
func NewAdminAPIController(s AdminAPIServicer, opts ...AdminAPIOption) Router {
	controller := &AdminAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdminAPIController
func (c *AdminAPIController) Routes() Routes {
	return Routes{
		"LocationsPost": Route{
			strings.ToUpper("Post"),
			"/locations",
			c.LocationsPost,
		},
		"ProductsGet": Route{
			strings.ToUpper("Get"),
			"/products",
			c.ProductsGet,
		},
		"ProductsPost": Route{
			strings.ToUpper("Post"),
			"/products",
			c.ProductsPost,
		},
	}
}

// LocationsPost - Create a new location
func (c *AdminAPIController) LocationsPost(w http.ResponseWriter, r *http.Request) {
	locationParam := Location{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&locationParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLocationRequired(locationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLocationConstraints(locationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.LocationsPost(r.Context(), locationParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProductsGet - Retrieve all products
func (c *AdminAPIController) ProductsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ProductsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProductsPost - Create a new product
func (c *AdminAPIController) ProductsPost(w http.ResponseWriter, r *http.Request) {
	productParam := Product{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&productParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProductRequired(productParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProductConstraints(productParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProductsPost(r.Context(), productParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
