/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
	models "template_backend/open-api/models"
	runtime "template_backend/open-api/runtime"

	"github.com/gorilla/mux"
)

// LocationAPIRouter defines the required methods for binding the api requests to a responses for the LocationAPI
// The LocationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LocationAPIServicer to perform the required actions, then write the service results to the http response.
type LocationAPIRouter interface {
	LocationLocationIdGet(http.ResponseWriter, *http.Request)
	LocationsGet(http.ResponseWriter, *http.Request)
	LocationsPost(http.ResponseWriter, *http.Request)
}

// LocationAPIServicer defines the api actions for the LocationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LocationAPIServicer interface {
	LocationLocationIdGet(context.Context, string) (models.ImplResponse, error)
	LocationsGet(context.Context) (models.ImplResponse, error)
	LocationsPost(context.Context, models.Location, *http.Request) (models.ImplResponse, error)
}

// LocationAPIController binds http requests to an api service and writes the service results to the http response
type LocationAPIController struct {
	service      LocationAPIServicer
	errorHandler runtime.ErrorHandler
}

// LocationAPIOption for how the controller is set up.
type LocationAPIOption func(*LocationAPIController)

// WithLocationAPIErrorHandler inject ErrorHandler into controller
func WithLocationAPIErrorHandler(h runtime.ErrorHandler) LocationAPIOption {
	return func(c *LocationAPIController) {
		c.errorHandler = h
	}
}

// NewLocationAPIController creates a default api controller
func NewLocationAPIController(s LocationAPIServicer, opts ...LocationAPIOption) runtime.Router {
	controller := &LocationAPIController{
		service:      s,
		errorHandler: runtime.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LocationAPIController
func (c *LocationAPIController) Routes() runtime.Routes {
	return runtime.Routes{
		"LocationLocationIdGet": runtime.Route{
			Method:      strings.ToUpper("Get"),
			Pattern:     "/location/{locationId}",
			HandlerFunc: c.LocationLocationIdGet,
		},
		"LocationsGet": runtime.Route{
			Method:      strings.ToUpper("Get"),
			Pattern:     "/locations",
			HandlerFunc: c.LocationsGet,
		},
		"LocationsPost": runtime.Route{
			Method:      strings.ToUpper("Post"),
			Pattern:     "/locations",
			HandlerFunc: c.LocationsPost,
		},
	}
}

// LocationLocationIdGet - Retrieve a single location
func (c *LocationAPIController) LocationLocationIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	locationIdParam := params["locationId"]
	if locationIdParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "locationId"}, nil)
		return
	}
	result, err := c.service.LocationLocationIdGet(r.Context(), locationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// LocationsGet - Retrieve all locations
func (c *LocationAPIController) LocationsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LocationsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// LocationsPost - Create a new location
func (c *LocationAPIController) LocationsPost(w http.ResponseWriter, r *http.Request) {
	locationParam := models.Location{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&locationParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &models.ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertLocationRequired(locationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertLocationConstraints(locationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.LocationsPost(r.Context(), locationParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}
