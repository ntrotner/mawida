/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	database_user "template_backend/database/paths/user"
	"template_backend/infrastructure/payment"
	paymentTypes "template_backend/infrastructure/payment/types"
	openapi "template_backend/open-api/authentication"
	models "template_backend/open-api/models"

	"github.com/rs/zerolog/log"
)

// AdministrationAPIServicer defines the api actions for the AdministrationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AdministrationAPIServicer interface {
	AdministrationChangeRoleUserIdPost(context.Context, string, models.ChangeRole, *http.Request) (models.ImplResponse, error)
}

// AdministrationAPIRouter defines the required methods for binding the api requests to a responses for the AdministrationAPI
// The AdministrationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AdministrationAPIServicer to perform the required actions, then write the service results to the http response.
type AdministrationAPIRouter interface {
	AdministrationChangeRoleUserIdPost(http.ResponseWriter, *http.Request)
}

// AdministrationAPIService is a service that implements the logic for the AdministrationAPIServicer
// This service should implement the business logic for every endpoint for the AdministrationAPI API.
// Include any external packages or services that will be required by this service.
type AdministrationAPIService struct {
}

// NewAdministrationAPIService creates a default api service
func NewAdministrationAPIService() AdministrationAPIServicer {
	return &AdministrationAPIService{}
}

// AdministrationChangeRoleUserIdPost - Change role of an user
func (s *AdministrationAPIService) AdministrationChangeRoleUserIdPost(ctx context.Context, userId string, changeRole models.ChangeRole, r *http.Request) (models.ImplResponse, error) {
	admin, err := openapi.IsAdmin(ctx, r)
	if err != nil || admin == nil {
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized"}}}), nil
	}

	user := database_user.FindUserById(ctx, &userId)
	if user == nil {
		return models.Response(404, models.Error{ErrorMessages: []models.Message{{Code: "101", Message: "User not found"}}}), nil
	}

	// Store previous state for rollback
	previousRole := user.Roles
	nextRoles := database_user.RoleMapping(changeRole.Role)

	if previousRole == database_user.ConfirmedUser && nextRoles == database_user.TemporaryUser {
		_, err = database_user.UpdateUserForPayment(ctx, &userId, &nextRoles, nil)
		if err != nil {
			log.Error().Err(err).Msg("Failed to update user role")
			return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "001", Message: "Failed to update user role"}}}), nil
		}

		// Then delete customer
		if user.CustomerIdentifier != nil && user.CustomerIdentifier.ID != "" {
			_, err := payment.DeleteCustomer(user.CustomerIdentifier.ID)
			if err != nil {
				// Rollback user role
				log.Error().Err(err).Msg("Failed to delete customer")
				_, rollbackErr := database_user.UpdateUserForPayment(ctx, &userId, &previousRole, user.CustomerIdentifier)
				if rollbackErr != nil {
					log.Error().Err(rollbackErr).Msg("Failed to rollback user role after payment deletion failure")
				}

				return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "001", Message: "Failed to delete customer"}}}), nil
			}
		}

		return models.Response(200, models.Success{}), nil
	}

	// Handle role change from TemporaryUser to ConfirmedUser
	if previousRole == database_user.TemporaryUser && nextRoles == database_user.ConfirmedUser {
		customerData := payment.CustomerData{
			Email: user.Email,
			Name:  user.Email,
		}
		customer, err := payment.CreateCustomer(customerData)
		if err != nil {
			log.Error().Err(err).Msg("Failed to create customer")
			return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "001", Message: "Failed to create customer"}}}), nil
		}

		customerIdentifier := paymentTypes.CustomerIdentifier{
			ID: customer.ID,
		}
		_, err = database_user.UpdateUserForPayment(ctx, &userId, &nextRoles, &customerIdentifier)
		if err != nil {
			// Rollback customer creation
			if customer != nil {
				_, deleteErr := payment.DeleteCustomer(customer.ID)
				if deleteErr != nil {
					log.Error().Err(deleteErr).Msg("Failed to rollback customer creation")
				}
			}
			log.Error().Err(err).Msg("Failed to enable user for payment")
			return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "001", Message: "Failed to enable user for payment"}}}), nil
		}

		return models.Response(200, models.Success{}), nil
	}

	// Handle other role changes
	_, err = database_user.UpdateUserForPayment(ctx, &userId, &nextRoles, user.CustomerIdentifier)
	if err != nil {
		log.Error().Err(err).Msg("Failed to update user role")
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "001", Message: "Failed to update user role"}}}), nil
	}

	return models.Response(200, models.Success{}), nil
}
