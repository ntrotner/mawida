/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
	models "template_backend/open-api/models"
	runtime "template_backend/open-api/runtime"

	"github.com/gorilla/mux"
)

// RentalAPIRouter defines the required methods for binding the api requests to a responses for the RentalAPI
// The RentalAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RentalAPIServicer to perform the required actions, then write the service results to the http response.
type RentalAPIRouter interface {
	RentalsGet(http.ResponseWriter, *http.Request)
	RentalsRentContractIdCancelPost(http.ResponseWriter, *http.Request)
	RentalsRentContractIdGet(http.ResponseWriter, *http.Request)
	RentalsRentContractIdPickupPost(http.ResponseWriter, *http.Request)
	RentalsRentContractIdReturnPost(http.ResponseWriter, *http.Request)
}

// RentalAPIServicer defines the api actions for the RentalAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RentalAPIServicer interface {
	RentalsGet(context.Context, *http.Request) (models.ImplResponse, error)
	RentalsRentContractIdCancelPost(context.Context, string, *http.Request) (models.ImplResponse, error)
	RentalsRentContractIdGet(context.Context, string, *http.Request) (models.ImplResponse, error)
	RentalsRentContractIdPickupPost(context.Context, string, models.PickupConfirmation, *http.Request) (models.ImplResponse, error)
	RentalsRentContractIdReturnPost(context.Context, string, models.ReturnProduct, *http.Request) (models.ImplResponse, error)
}

// RentalAPIController binds http requests to an api service and writes the service results to the http response
type RentalAPIController struct {
	service      RentalAPIServicer
	errorHandler runtime.ErrorHandler
}

// RentalAPIOption for how the controller is set up.
type RentalAPIOption func(*RentalAPIController)

// WithRentalAPIErrorHandler inject ErrorHandler into controller
func WithRentalAPIErrorHandler(h runtime.ErrorHandler) RentalAPIOption {
	return func(c *RentalAPIController) {
		c.errorHandler = h
	}
}

// NewRentalAPIController creates a default api controller
func NewRentalAPIController(s RentalAPIServicer, opts ...RentalAPIOption) runtime.Router {
	controller := &RentalAPIController{
		service:      s,
		errorHandler: runtime.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RentalAPIController
func (c *RentalAPIController) Routes() runtime.Routes {
	return runtime.Routes{
		"RentalsGet": runtime.Route{
			Method:      strings.ToUpper("Get"),
			Pattern:     "/rentals",
			HandlerFunc: c.RentalsGet,
		},
		"RentalsRentContractIdCancelPost": runtime.Route{
			Method:      strings.ToUpper("Post"),
			Pattern:     "/rentals/{rentContractId}/cancel",
			HandlerFunc: c.RentalsRentContractIdCancelPost,
		},
		"RentalsRentContractIdGet": runtime.Route{
			Method:      strings.ToUpper("Get"),
			Pattern:     "/rentals/{rentContractId}",
			HandlerFunc: c.RentalsRentContractIdGet,
		},
		"RentalsRentContractIdPickupPost": runtime.Route{
			Method:      strings.ToUpper("Post"),
			Pattern:     "/rentals/{rentContractId}/pickup",
			HandlerFunc: c.RentalsRentContractIdPickupPost,
		},
		"RentalsRentContractIdReturnPost": runtime.Route{
			Method:      strings.ToUpper("Post"),
			Pattern:     "/rentals/{rentContractId}/return",
			HandlerFunc: c.RentalsRentContractIdReturnPost,
		},
	}
}

// RentalsGet - Retrieve all rent contracts
func (c *RentalAPIController) RentalsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RentalsGet(r.Context(), r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// RentalsRentContractIdCancelPost - Cancel a rent contract
func (c *RentalAPIController) RentalsRentContractIdCancelPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	rentContractIdParam := params["rentContractId"]
	if rentContractIdParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "rentContractId"}, nil)
		return
	}
	result, err := c.service.RentalsRentContractIdCancelPost(r.Context(), rentContractIdParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// RentalsRentContractIdGet - Retrieve a single rent contract
func (c *RentalAPIController) RentalsRentContractIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	rentContractIdParam := params["rentContractId"]
	if rentContractIdParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "rentContractId"}, nil)
		return
	}
	result, err := c.service.RentalsRentContractIdGet(r.Context(), rentContractIdParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// RentalsRentContractIdPickupPost - Confirm product pickup
func (c *RentalAPIController) RentalsRentContractIdPickupPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	rentContractIdParam := params["rentContractId"]
	if rentContractIdParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "rentContractId"}, nil)
		return
	}
	pickupConfirmationParam := models.PickupConfirmation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&pickupConfirmationParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &models.ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertPickupConfirmationRequired(pickupConfirmationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertPickupConfirmationConstraints(pickupConfirmationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RentalsRentContractIdPickupPost(r.Context(), rentContractIdParam, pickupConfirmationParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// RentalsRentContractIdReturnPost - Confirm product return
func (c *RentalAPIController) RentalsRentContractIdReturnPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	rentContractIdParam := params["rentContractId"]
	if rentContractIdParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "rentContractId"}, nil)
		return
	}
	returnProductParam := models.ReturnProduct{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&returnProductParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &models.ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertReturnProductRequired(returnProductParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertReturnProductConstraints(returnProductParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RentalsRentContractIdReturnPost(r.Context(), rentContractIdParam, returnProductParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}
