/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
	models "template_backend/open-api/models"
	runtime "template_backend/open-api/runtime"

	"github.com/gorilla/mux"
)

// ProductAPIRouter defines the required methods for binding the api requests to a responses for the ProductAPI
// The ProductAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProductAPIServicer to perform the required actions, then write the service results to the http response.
type ProductAPIRouter interface {
	ProductsGet(http.ResponseWriter, *http.Request)
	ProductsPost(http.ResponseWriter, *http.Request)
	ProductsProductIdDelete(http.ResponseWriter, *http.Request)
	ProductsProductIdGet(http.ResponseWriter, *http.Request)
	ProductsProductIdRentPost(http.ResponseWriter, *http.Request)
}

// ProductAPIServicer defines the api actions for the ProductAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProductAPIServicer interface {
	ProductsGet(context.Context, *http.Request) (models.ImplResponse, error)
	ProductsPost(context.Context, models.Product, *http.Request) (models.ImplResponse, error)
	ProductsProductIdDelete(context.Context, string) (models.ImplResponse, error)
	ProductsProductIdGet(context.Context, string, *http.Request) (models.ImplResponse, error)
	ProductsProductIdRentPost(context.Context, string, models.RentProductFormular, *http.Request) (models.ImplResponse, error)
}

// ProductAPIController binds http requests to an api service and writes the service results to the http response
type ProductAPIController struct {
	service      ProductAPIServicer
	errorHandler runtime.ErrorHandler
}

// ProductAPIOption for how the controller is set up.
type ProductAPIOption func(*ProductAPIController)

// WithProductAPIErrorHandler inject ErrorHandler into controller
func WithProductAPIErrorHandler(h runtime.ErrorHandler) ProductAPIOption {
	return func(c *ProductAPIController) {
		c.errorHandler = h
	}
}

// NewProductAPIController creates a default api controller
func NewProductAPIController(s ProductAPIServicer, opts ...ProductAPIOption) runtime.Router {
	controller := &ProductAPIController{
		service:      s,
		errorHandler: runtime.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProductAPIController
func (c *ProductAPIController) Routes() runtime.Routes {
	return runtime.Routes{
		"ProductsGet": runtime.Route{
			Method:      strings.ToUpper("Get"),
			Pattern:     "/products",
			HandlerFunc: c.ProductsGet,
		},
		"ProductsPost": runtime.Route{
			Method:      strings.ToUpper("Post"),
			Pattern:     "/products",
			HandlerFunc: c.ProductsPost,
		},
		"ProductsProductIdDelete": runtime.Route{
			Method:      strings.ToUpper("Delete"),
			Pattern:     "/products/{productId}",
			HandlerFunc: c.ProductsProductIdDelete,
		},
		"ProductsProductIdGet": runtime.Route{
			Method:      strings.ToUpper("Get"),
			Pattern:     "/products/{productId}",
			HandlerFunc: c.ProductsProductIdGet,
		},
		"ProductsProductIdRentPost": runtime.Route{
			Method:      strings.ToUpper("Post"),
			Pattern:     "/products/{productId}/rent",
			HandlerFunc: c.ProductsProductIdRentPost,
		},
	}
}

// ProductsGet - Retrieve all products
func (c *ProductAPIController) ProductsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ProductsGet(r.Context(), r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProductsPost - Create a new product
func (c *ProductAPIController) ProductsPost(w http.ResponseWriter, r *http.Request) {
	productParam := models.Product{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&productParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &models.ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertProductRequired(productParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertProductConstraints(productParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProductsPost(r.Context(), productParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProductsProductIdDelete - Delete a single product
func (c *ProductAPIController) ProductsProductIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	productIdParam := params["productId"]
	if productIdParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "productId"}, nil)
		return
	}
	result, err := c.service.ProductsProductIdDelete(r.Context(), productIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProductsProductIdGet - Retrieve a single product
func (c *ProductAPIController) ProductsProductIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	productIdParam := params["productId"]
	if productIdParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "productId"}, nil)
		return
	}
	result, err := c.service.ProductsProductIdGet(r.Context(), productIdParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProductsProductIdRentPost - Rent a product
func (c *ProductAPIController) ProductsProductIdRentPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	productIdParam := params["productId"]
	if productIdParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "productId"}, nil)
		return
	}
	rentProductFormularParam := models.RentProductFormular{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&rentProductFormularParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &models.ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertRentProductFormularRequired(rentProductFormularParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertRentProductFormularConstraints(rentProductFormularParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProductsProductIdRentPost(r.Context(), productIdParam, rentProductFormularParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}
