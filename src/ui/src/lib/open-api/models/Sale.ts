/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Sale
 */
export interface Sale {
    /**
     * Unique identifier for the sale
     * @type {string}
     * @memberof Sale
     */
    id?: string;
    /**
     * Unique identifier for the product
     * @type {string}
     * @memberof Sale
     */
    productId?: string;
    /**
     * Unique identifier for the user
     * @type {string}
     * @memberof Sale
     */
    userId?: string;
    /**
     * Price of the sale
     * @type {number}
     * @memberof Sale
     */
    price?: number;
    /**
     * Indicates whether the sale has been paid
     * @type {boolean}
     * @memberof Sale
     */
    paid?: boolean;
    /**
     * Deposit amount for the sale
     * @type {number}
     * @memberof Sale
     */
    deposit?: number;
    /**
     * Unix timestamp for the creation date of the sale
     * @type {number}
     * @memberof Sale
     */
    createdAt?: number;
    /**
     * Unix timestamp for the payment date of the sale
     * @type {number}
     * @memberof Sale
     */
    paidAt?: number;
    /**
     * Unix timestamp for the return date of the sale
     * @type {number}
     * @memberof Sale
     */
    returnedAt?: number;
    /**
     * Amount of the deposit that has been refunded
     * @type {number}
     * @memberof Sale
     */
    depositRefundedAmount?: number;
    /**
     * Unix timestamp for the deposit refund date
     * @type {number}
     * @memberof Sale
     */
    depositRefundedAt?: number;
}

/**
 * Check if a given object implements the Sale interface.
 */
export function instanceOfSale(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SaleFromJSON(json: any): Sale {
    return SaleFromJSONTyped(json, false);
}

export function SaleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Sale {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'productId': !exists(json, 'productId') ? undefined : json['productId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'paid': !exists(json, 'paid') ? undefined : json['paid'],
        'deposit': !exists(json, 'deposit') ? undefined : json['deposit'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'paidAt': !exists(json, 'paidAt') ? undefined : json['paidAt'],
        'returnedAt': !exists(json, 'returnedAt') ? undefined : json['returnedAt'],
        'depositRefundedAmount': !exists(json, 'depositRefundedAmount') ? undefined : json['depositRefundedAmount'],
        'depositRefundedAt': !exists(json, 'depositRefundedAt') ? undefined : json['depositRefundedAt'],
    };
}

export function SaleToJSON(value?: Sale | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'productId': value.productId,
        'userId': value.userId,
        'price': value.price,
        'paid': value.paid,
        'deposit': value.deposit,
        'createdAt': value.createdAt,
        'paidAt': value.paidAt,
        'returnedAt': value.returnedAt,
        'depositRefundedAmount': value.depositRefundedAmount,
        'depositRefundedAt': value.depositRefundedAt,
    };
}

