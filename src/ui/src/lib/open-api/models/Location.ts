/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LocationCoordinates } from './LocationCoordinates';
import {
    LocationCoordinatesFromJSON,
    LocationCoordinatesFromJSONTyped,
    LocationCoordinatesToJSON,
} from './LocationCoordinates';

/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Unique identifier for the location
     * @type {string}
     * @memberof Location
     */
    id?: string;
    /**
     * City where the product is located
     * @type {string}
     * @memberof Location
     */
    city?: string;
    /**
     * Street address of the product location
     * @type {string}
     * @memberof Location
     */
    street?: string;
    /**
     * Postal code of the product location
     * @type {string}
     * @memberof Location
     */
    postalCode?: string;
    /**
     * Name of the building
     * @type {string}
     * @memberof Location
     */
    buildingName?: string;
    /**
     * 
     * @type {LocationCoordinates}
     * @memberof Location
     */
    coordinates?: LocationCoordinates;
    /**
     * Additional notes or annotations about the location
     * @type {string}
     * @memberof Location
     */
    notes?: string;
}

/**
 * Check if a given object implements the Location interface.
 */
export function instanceOfLocation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocationFromJSON(json: any): Location {
    return LocationFromJSONTyped(json, false);
}

export function LocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Location {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'postalCode': !exists(json, 'postalCode') ? undefined : json['postalCode'],
        'buildingName': !exists(json, 'buildingName') ? undefined : json['buildingName'],
        'coordinates': !exists(json, 'coordinates') ? undefined : LocationCoordinatesFromJSON(json['coordinates']),
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
    };
}

export function LocationToJSON(value?: Location | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'city': value.city,
        'street': value.street,
        'postalCode': value.postalCode,
        'buildingName': value.buildingName,
        'coordinates': LocationCoordinatesToJSON(value.coordinates),
        'notes': value.notes,
    };
}

