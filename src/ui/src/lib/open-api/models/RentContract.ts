/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PaymentInstructions } from './PaymentInstructions';
import {
    PaymentInstructionsFromJSON,
    PaymentInstructionsFromJSONTyped,
    PaymentInstructionsToJSON,
} from './PaymentInstructions';
import type { RentContractStatus } from './RentContractStatus';
import {
    RentContractStatusFromJSON,
    RentContractStatusFromJSONTyped,
    RentContractStatusToJSON,
} from './RentContractStatus';

/**
 * 
 * @export
 * @interface RentContract
 */
export interface RentContract {
    /**
     * Unique identifier for the rent contract
     * @type {string}
     * @memberof RentContract
     */
    id?: string;
    /**
     * Unique identifier for the product
     * @type {string}
     * @memberof RentContract
     */
    productId?: string;
    /**
     * Unique identifier for the user
     * @type {string}
     * @memberof RentContract
     */
    userId?: string;
    /**
     * 
     * @type {PaymentInstructions}
     * @memberof RentContract
     */
    paymentInstructions?: PaymentInstructions;
    /**
     * Unix timestamp for the start date of the rental period
     * @type {number}
     * @memberof RentContract
     */
    rentalStartDate?: number;
    /**
     * Unix timestamp for the end date of the rental period
     * @type {number}
     * @memberof RentContract
     */
    rentalEndDate?: number;
    /**
     * 
     * @type {RentContractStatus}
     * @memberof RentContract
     */
    status?: RentContractStatus;
    /**
     * Price of the rent contract
     * @type {number}
     * @memberof RentContract
     */
    price?: number;
    /**
     * Deposit amount for the rent contract
     * @type {number}
     * @memberof RentContract
     */
    deposit?: number;
    /**
     * Total amount of the rent contract
     * @type {number}
     * @memberof RentContract
     */
    totalAmount?: number;
    /**
     * Unique identifier for the pickup location
     * @type {string}
     * @memberof RentContract
     */
    pickupLocationId?: string;
    /**
     * Unique identifier for the return location
     * @type {string}
     * @memberof RentContract
     */
    returnLocationId?: string;
}

/**
 * Check if a given object implements the RentContract interface.
 */
export function instanceOfRentContract(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RentContractFromJSON(json: any): RentContract {
    return RentContractFromJSONTyped(json, false);
}

export function RentContractFromJSONTyped(json: any, ignoreDiscriminator: boolean): RentContract {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? !exists(json, '_id') ? undefined : json['_id'] : json['id'],
        'productId': !exists(json, 'productId') ? undefined : json['productId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'paymentInstructions': !exists(json, 'paymentInstructions') ? undefined : PaymentInstructionsFromJSON(json['paymentInstructions']),
        'rentalStartDate': !exists(json, 'rentalStartDate') ? undefined : json['rentalStartDate'],
        'rentalEndDate': !exists(json, 'rentalEndDate') ? undefined : json['rentalEndDate'],
        'status': !exists(json, 'status') ? undefined : RentContractStatusFromJSON(json['status']),
        'price': !exists(json, 'price') ? undefined : json['price'],
        'deposit': !exists(json, 'deposit') ? undefined : json['deposit'],
        'totalAmount': !exists(json, 'totalAmount') ? undefined : json['totalAmount'],
        'pickupLocationId': !exists(json, 'pickupLocationId') ? undefined : json['pickupLocationId'],
        'returnLocationId': !exists(json, 'returnLocationId') ? undefined : json['returnLocationId'],
    };
}

export function RentContractToJSON(value?: RentContract | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'productId': value.productId,
        'userId': value.userId,
        'paymentInstructions': PaymentInstructionsToJSON(value.paymentInstructions),
        'rentalStartDate': value.rentalStartDate,
        'rentalEndDate': value.rentalEndDate,
        'status': RentContractStatusToJSON(value.status),
        'price': value.price,
        'deposit': value.deposit,
        'totalAmount': value.totalAmount,
        'pickupLocationId': value.pickupLocationId,
        'returnLocationId': value.returnLocationId,
    };
}

