/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Product,
  ProductsProductIdGet200Response,
  RentProductConfirmation,
  RentProductFormular,
  Success,
} from '../models/index';
import {
    ProductFromJSON,
    ProductPublicFromJSON,
    ProductToJSON,
    ProductsProductIdGet200ResponseFromJSON,
    ProductsProductIdGet200ResponseToJSON,
    RentProductConfirmationFromJSON,
    RentProductConfirmationToJSON,
    RentProductFormularFromJSON,
    RentProductFormularToJSON,
    SuccessFromJSON,
    SuccessToJSON,
} from '../models/index';

export interface ProductsPostRequest {
    product?: Product;
}

export interface ProductsProductIdDeleteRequest {
    productId: string;
}

export interface ProductsProductIdGetRequest {
    productId: string;
}

export interface ProductsProductIdRentPostRequest {
    productId: string;
    rentProductFormular?: RentProductFormular;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     * Retrieve all products
     */
    async productsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductPublicFromJSON));
    }

    /**
     * Retrieve all products
     */
    async productsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>> {
        const response = await this.productsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new product
     */
    async productsPostRaw(requestParameters: ProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Create a new product
     */
    async productsPost(requestParameters: ProductsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.productsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single product
     */
    async productsProductIdDeleteRaw(requestParameters: ProductsProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling productsProductIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{productId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Delete a single product
     */
    async productsProductIdDelete(requestParameters: ProductsProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.productsProductIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single product
     */
    async productsProductIdGetRaw(requestParameters: ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductsProductIdGet200Response>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling productsProductIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{productId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductsProductIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a single product
     */
    async productsProductIdGet(requestParameters: ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductsProductIdGet200Response> {
        const response = await this.productsProductIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rent a product
     */
    async productsProductIdRentPostRaw(requestParameters: ProductsProductIdRentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RentProductConfirmation>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling productsProductIdRentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{productId}/rent`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RentProductFormularToJSON(requestParameters.rentProductFormular),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RentProductConfirmationFromJSON(jsonValue));
    }

    /**
     * Rent a product
     */
    async productsProductIdRentPost(requestParameters: ProductsProductIdRentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RentProductConfirmation> {
        const response = await this.productsProductIdRentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
