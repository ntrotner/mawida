/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PickupConfirmation,
  RentProductConfirmation,
  RentProductFormular,
  ReturnProduct,
  Success,
} from '../models/index';
import {
    PickupConfirmationFromJSON,
    PickupConfirmationToJSON,
    RentProductConfirmationFromJSON,
    RentProductConfirmationToJSON,
    RentProductFormularFromJSON,
    RentProductFormularToJSON,
    ReturnProductFromJSON,
    ReturnProductToJSON,
    SuccessFromJSON,
    SuccessToJSON,
} from '../models/index';

export interface ProductsProductIdRentPostRequest {
    productId: string;
    rentProductFormular?: RentProductFormular;
}

export interface RentalsRentContractIdPickupPostRequest {
    rentContractId: string;
    pickupConfirmation?: PickupConfirmation;
}

export interface RentalsRentContractIdReturnPostRequest {
    rentContractId: string;
    returnProduct?: ReturnProduct;
}

/**
 * 
 */
export class RentalApi extends runtime.BaseAPI {

    /**
     * Rent a product
     */
    async productsProductIdRentPostRaw(requestParameters: ProductsProductIdRentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RentProductConfirmation>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling productsProductIdRentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products/{productId}/rent`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RentProductFormularToJSON(requestParameters.rentProductFormular),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RentProductConfirmationFromJSON(jsonValue));
    }

    /**
     * Rent a product
     */
    async productsProductIdRentPost(requestParameters: ProductsProductIdRentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RentProductConfirmation> {
        const response = await this.productsProductIdRentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm product pickup
     */
    async rentalsRentContractIdPickupPostRaw(requestParameters: RentalsRentContractIdPickupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.rentContractId === null || requestParameters.rentContractId === undefined) {
            throw new runtime.RequiredError('rentContractId','Required parameter requestParameters.rentContractId was null or undefined when calling rentalsRentContractIdPickupPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/rentals/{rentContractId}/pickup`.replace(`{${"rentContractId"}}`, encodeURIComponent(String(requestParameters.rentContractId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PickupConfirmationToJSON(requestParameters.pickupConfirmation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Confirm product pickup
     */
    async rentalsRentContractIdPickupPost(requestParameters: RentalsRentContractIdPickupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.rentalsRentContractIdPickupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm product return
     */
    async rentalsRentContractIdReturnPostRaw(requestParameters: RentalsRentContractIdReturnPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.rentContractId === null || requestParameters.rentContractId === undefined) {
            throw new runtime.RequiredError('rentContractId','Required parameter requestParameters.rentContractId was null or undefined when calling rentalsRentContractIdReturnPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/rentals/{rentContractId}/return`.replace(`{${"rentContractId"}}`, encodeURIComponent(String(requestParameters.rentContractId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnProductToJSON(requestParameters.returnProduct),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Confirm product return
     */
    async rentalsRentContractIdReturnPost(requestParameters: RentalsRentContractIdReturnPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.rentalsRentContractIdReturnPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
