/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Success,
  UserLogin,
  UserRegistration,
} from '../models/index';
import {
    SuccessFromJSON,
    SuccessToJSON,
    UserLoginFromJSON,
    UserLoginToJSON,
    UserRegistrationFromJSON,
    UserRegistrationToJSON,
} from '../models/index';
import { clearToken, setToken } from '../helpers';

export interface LoginPostRequest {
    userLogin?: UserLogin;
}

export interface RegisterPostRequest {
    userRegistration?: UserRegistration;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * User login
     */
    async loginPostRaw(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginToJSON(requestParameters.userLogin),
        }, initOverrides);

        setToken(response.headers.get('Authorization'));
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * User login
     */
    async loginPost(requestParameters: LoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.loginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User logout
     */
    async logoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        clearToken();
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * User logout
     */
    async logoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.logoutPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh authentication token
     */
    async refreshTokenPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        setToken(response.headers.get('Authorization'));
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Refresh authentication token
     */
    async refreshTokenPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.refreshTokenPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Register a new user
     */
    async registerPostRaw(requestParameters: RegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRegistrationToJSON(requestParameters.userRegistration),
        }, initOverrides);

        setToken(response.headers.get('Authorization'));
        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Register a new user
     */
    async registerPost(requestParameters: RegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.registerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
