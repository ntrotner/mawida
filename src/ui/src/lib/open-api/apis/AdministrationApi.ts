/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeRole,
  RefundDeposit,
  Sale,
  Success,
  UserProfile,
} from '../models/index';
import {
    ChangeRoleFromJSON,
    ChangeRoleToJSON,
    RefundDepositFromJSON,
    RefundDepositToJSON,
    SaleFromJSON,
    SaleToJSON,
    SuccessFromJSON,
    SuccessToJSON,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models/index';

export interface AdministrationChangeRoleUserIdPostRequest {
    userId: string;
    changeRole?: ChangeRole;
}

export interface AdministrationRefundDepositPostRequest {
    refundDeposit?: RefundDeposit;
}

/**
 * 
 */
export class AdministrationApi extends runtime.BaseAPI {

    /**
     * Change role of an user
     */
    async administrationChangeRoleUserIdPostRaw(requestParameters: AdministrationChangeRoleUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling administrationChangeRoleUserIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/administration/change-role/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRoleToJSON(requestParameters.changeRole),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Change role of an user
     */
    async administrationChangeRoleUserIdPost(requestParameters: AdministrationChangeRoleUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.administrationChangeRoleUserIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refund deposit of a payment transaction
     */
    async administrationRefundDepositPostRaw(requestParameters: AdministrationRefundDepositPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/administration/refund-deposit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundDepositToJSON(requestParameters.refundDeposit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Refund deposit of a payment transaction
     */
    async administrationRefundDepositPost(requestParameters: AdministrationRefundDepositPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.administrationRefundDepositPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all sales
     */
    async administrationSalesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Sale>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/administration/sales`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SaleFromJSON));
    }

    /**
     * Retrieve all sales
     */
    async administrationSalesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Sale>> {
        const response = await this.administrationSalesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all users
     */
    async administrationUsersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserProfile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/administration/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserProfileFromJSON));
    }

    /**
     * Retrieve all users
     */
    async administrationUsersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserProfile>> {
        const response = await this.administrationUsersGetRaw(initOverrides);
        return await response.value();
    }

}
