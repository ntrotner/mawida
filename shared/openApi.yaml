openapi: 3.0.3
info:
  title: Swagger - OpenAPI 3.0
  contact:
    email: nikita@ttnr.me
  version: 1.0.0
servers:
  - url: http://api.template.de/
    description: Dev server
  - url: https://euw.backend.example.com/
    description: Prod server
tags:
  - name: authentication
    description: Authenticate users
  - name: user
    description: Modify and retrieve user settings
  - name: status
    description: Check application health
paths:
  /health:
    get:
      tags:
        - status
      summary: Check health of server
      operationId: health
      responses:
        '200':
          $ref: '#/components/responses/Health'
        '500':
          $ref: '#/components/responses/Health'
  /register:
    post:
      tags:
        - authentication
      summary: Register a new user
      requestBody:
        $ref: '#/components/requestBodies/UserRegistration'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
  /login:
    post:
      tags:
        - authentication
      summary: User login
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Error'
  /refresh-token:
    post:
      tags:
        - authentication
      summary: Refresh authentication token
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /logout:
    post:
      tags:
        - authentication
      summary: User logout
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
  /profile:
    get:
      tags:
        - user
      summary: Get user profile
      responses:
        '200':
          $ref: '#/components/responses/UserProfile'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /password-reset:
    post:
      tags:
        - user
      summary: Initiate password reset
      requestBody:
        $ref: '#/components/requestBodies/PasswordReset'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /change-password:
    post:
      tags:
        - user
      summary: Change user password
      requestBody:
        $ref: '#/components/requestBodies/ChangePassword'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /change-email:
    post:
      tags:
        - user
      summary: Change user email
      requestBody:
        $ref: '#/components/requestBodies/ChangeEmail'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /locations:
    post:
      tags:
        - admin
      summary: Create a new location
      requestBody:
        $ref: '#/components/requestBodies/Location'
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
    get:
      tags:
        - user
      summary: Retrieve all locations
      responses:
        '200':
          $ref: '#/components/responses/LocationList'
        '401':
          $ref: '#/components/responses/Error'
  /location/{locationId}:
    get:
      tags:
        - user
      summary: Retrieve a single location
      parameters:
        - name: locationId
          in: path
          required: true
          description: The ID of the location to retrieve
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Location'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
  /products:
    post:
      tags:
        - admin
      summary: Create a new product
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '201':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
    get:
      tags:
        - admin
      summary: Retrieve all products
      responses:
        '200':
          $ref: '#/components/responses/ProductList'
        '401':
          $ref: '#/components/responses/Error'

  /products/{productId}:
    get:
      tags:
        - user
      summary: Retrieve a single product
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ProductDetail'
        '404':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /rentals/{rentContractId}/pickup:
    post:
      tags:
        - user
      summary: Confirm product pickup
      parameters:
        - name: rentContractId
          in: path
          required: true
          description: The ID of the rent contract
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/PickupConfirmation'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
  /products/{productId}/rent:
    post:
      tags:
        - user
      summary: Rent a product
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the product to rent
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/RentProductFormular'
      responses:
        '200':
          $ref: '#/components/responses/RentProductResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
  /rentals/{rentContractId}/return:
    post:
      tags:
        - user
      summary: Confirm product return
      parameters:
        - name: rentContractId
          in: path
          required: true
          description: The ID of the rent contract
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ReturnProduct'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    Error:
      description: Error messages
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UserProfile:
      description: User profile
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProfile'
    Health:
      description: Health
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'
    Location:
      description: Location details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Location'
    LocationList:
      description: List of locations
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Location'
    Product:
      description: Product details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    ProductList:
      description: List of products
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Product'
    ProductDetail:
      description: Detailed product information
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Product'
              - $ref: '#/components/schemas/ProductPublic'
    RentProductResponse:
      description: Product rented successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RentProductConfirmation'
  requestBodies:
    UserRegistration:
      description: User registration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegistration'
    UserLogin:
      description: User login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
    PasswordReset:
      description: Password reset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PasswordReset'
    ChangePassword:
      description: Password change
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassword'
    ChangeEmail:
      description: Email change
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangeEmail'
    Location:
      description: Location details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Location'
    Product:
      description: Product details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    RentProductFormular:
      description: Rental formular
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RentProductFormular'
    PickupConfirmation:
      description: Pickup confirmation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PickupConfirmation'
    ReturnProduct:
      description: Return product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReturnProduct'
  schemas:
    Success:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        warningMessages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Error:
      type: object
      properties:
        warningMessages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        errorMessages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    Health:
      type: object
      properties:
        server:
          type: boolean
        db:
          type: boolean
    UserProfile:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    UserRegistration:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+{}|:<>?~]).*$"
          format: password
      required:
        - email
        - password
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+{}|:<>?~]).*$"
          format: password
      required:
        - email
        - password
    PasswordReset:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    ChangePassword:
      type: object
      properties:
        currentPassword:
          type: string
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+{}|:<>?~]).*$"
          format: password
        newPassword:
          type: string
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+{}|:<>?~]).*$"
          format: password
      required:
        - currentPassword
        - newPassword
    ChangeEmail:
      type: object
      properties:
        currentEmail:
          type: string
        newEmail:
          type: string
      required:
        - currentEmail
        - newEmail
    Product:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the product
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Description of the product
        images:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                description: Unique identifier for the image
              name:
                type: string
                description: Name of the image
              data:
                type: string
                format: byte
                description: Base64 encoded image data
            required:
              - ID
              - name
              - data
          description: List of base64 encoded image data with IDs and names
        documents:
          type: array
          items:
            type: object
            properties:
              ID:
                type: string
                description: Unique identifier for the document
              name:
                type: string
                description: Name of the document
              data:
                type: string
                format: byte
                description: Base64 encoded document data
            required:
              - ID
              - name
              - data
          description: List of base64 encoded document data with IDs and names
        location:
          type: string
          description: Location ID of the product
        pricing:
          type: object
          properties:
            price:
              type: number
              format: float
              description: Price of the product
            deposit:
              type: number
              format: float
              description: Deposit amount for the product
          required:
            - price
          description: Pricing details including price and deposit
        dynamicAttributes:
          type: object
          additionalProperties: true
          description: Dynamic attributes for the product
      required:
        - name
        - description
        - pricing
        - location
    ProductPublic:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            ID:
              type: string
              description: Unique identifier for the product
            isRented:
              type: boolean
              description: Indicates whether the product is currently rented
            isCurrentUserRenter:
              type: boolean
              description: Indicates whether the current user is the renter of the product
            qrCodeUrl:
              type: string
              description: URL of the generated QR code
            renterInfo:
              type: object
              properties:
                rentalStartDate:
                  type: string
                  format: date
                  description: Start date of the rental period
                rentalEndDate:
                  type: string
                  format: date
                  description: End date of the rental period
                expectedDuration:
                  type: string
                  description: Expected duration of the rental
              description: Information about the rental period
    Location:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the location
        city:
          type: string
          description: City where the product is located
        street:
          type: string
          description: Street address of the product location
        postalCode:
          type: string
          description: Postal code of the product location
        buildingName:
          type: string
          description: Name of the building
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              format: float
              description: Latitude of the product location
            longitude:
              type: number
              format: float
              description: Longitude of the product location
            notes:
              type: string
              description: Additional notes or annotations about the coordinates
          description: Coordinates and notes for the product location
    RentProductFormular:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user renting the product
        rentalStartDate:
          type: string
          format: date
          description: The start date of the rental period
        rentalEndDate:
          type: string
          format: date
          description: The end date of the rental period
        additionalNotes:
          type: string
          description: Free text for additional notes or special instructions
        locationId:
          type: string
          description: Identifier for the location where the product will be picked up
        paymentMethodId:
          type: string
          description: Identifier for the payment method used for the rental
        dynamicAttributes:
          type: object
          additionalProperties: true
          description: Dynamic attributes for the rental request
      required:
        - userId
        - rentalStartDate
        - rentalEndDate
        - locationId
        - paymentMethodId
    RentProductConfirmation:
      type: object
      properties:
        rentContractId:
          type: string
          description: Unique identifier for the rent contract
    PickupConfirmation:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user picking up the product
        pickupImages:
          type: array
          items:
            type: string
            format: byte
            description: Base64 encoded image data
      required:
        - userId
        - pickupImages
    ReturnProduct:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user returning the product
        returnImages:
          type: array
          items:
            type: string
            format: byte
            description: Base64 encoded image data
        additionalNotes:
          type: string
          description: Free text for additional notes or special instructions
      required:
        - userId
        - returnImages
        - additionalNotes